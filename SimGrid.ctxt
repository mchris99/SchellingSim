#BlueJ class context
comment0.target=SimGrid
comment0.text=\r\n\ Part\ of\ the\ solution\ to\ Project\ 4.\r\n\ \r\n\ Finalized\ by\ mchris99\r\n\ \r\n\ Represents\ the\ grid\ of\ agents\ in\ the\ Schelling\ Simulation.\r\n\r\n\ @author\ lewis63\ and\ mchris99\r\n\ @version\ 2018.04.19\r\n
comment1.params=rows\ cols
comment1.target=SimGrid(int,\ int)
comment1.text=\r\n\ Creates\ and\ initializes\ an\ agent\ grid\ of\ the\ specified\ size.\r\n\ \r\n\ @param\ rows\ the\ number\ of\ rows\ in\ the\ simulation\ grid\r\n\ @param\ cols\ the\ number\ of\ cols\ in\ the\ simulation\ grid\r\n
comment10.params=
comment10.target=void\ resetGrid()
comment10.text=\r\n\ Resets\ the\ simulation\ grid\ by\ clearing\ the\ pane\ of\ agent\ squares\ and\r\n\ reinitializing\ the\ grid.\r\n
comment2.params=
comment2.target=void\ initializeGrid()
comment2.text=\r\n\ Fills\ the\ grid\ with\ an\ initial,\ random\ set\ of\ agents\ and\ vacant\ spaces.\r\n\ Approximately\ 10%\ of\ the\ grid\ locations\ are\ left\ vacant.\ The\ rest\ are\r\n\ evenly\ distributed\ between\ red\ and\ blue\ agents.\r\n
comment3.params=
comment3.target=double\ getSatisfiedPercent()
comment3.text=\r\n\ Gets\ the\ current\ percentage\ of\ satisfied\ agents\ in\ the\ grid.\r\n\ \r\n\ @return\ the\ percentage\ of\ satisfied\ agents\ in\ the\ simulation\r\n
comment4.params=
comment4.target=int\ performSimulationStep()
comment4.text=\r\n\ Performs\ one\ step\ of\ the\ simulation\ by\ finding\ the\ location\ of\ all\r\n\ unsatisfied\ agents,\ then\ moving\ each\ one\ to\ a\ randomly\ chosen\ vacant\r\n\ location.\r\n\ \r\n\ @return\ the\ number\ of\ unsatisfied\ agents\ found\r\n
comment5.params=
comment5.target=java.util.ArrayList\ findUnsatisfiedAgents()
comment5.text=\r\n\ Creates\ a\ list\ of\ all\ grid\ locations\ that\ contain\ an\ unsatisfied\ agent.\r\n\ \r\n\ @return\ a\ list\ of\ the\ locations\ of\ all\ currently\ unsatisfied\ agents\r\n
comment6.params=i\ j
comment6.target=boolean\ agentIsSatisfied(int,\ int)
comment6.text=\r\n\ Determines\ if\ the\ agent\ at\ the\ specified\ location\ is\ satisfied.\ First\r\n\ gets\ a\ list\ of\ all\ valid,\ non-vacant\ neighbors,\ then\ counts\ the\ number\r\n\ of\ those\ neighbors\ that\ are\ the\ same\ type.\ An\ agent\ is\ satisfied\ with\r\n\ its\ current\ location\ if\ the\ ratio\ of\ similar\ agents\ is\ greater\ that\r\n\ a\ set\ threshold.\r\n\ \r\n\ @return\ true\ if\ the\ agent\ is\ satisfied\ with\ its\ current\ location\r\n
comment7.params=i\ j
comment7.target=java.util.ArrayList\ getNeighbors(int,\ int)
comment7.text=\r\n\ Gets\ a\ list\ of\ agents\ that\ are\ neighbors\ (adjacent)\ to\ the\ specified\r\n\ grid\ location.\ Checks\ each\ potential\ location\ individually,\ making\ sure\r\n\ that\ each\ is\ valid\ (on\ the\ grid)\ and\ not\ vacant.\r\n\ \r\n\ @return\ a\ list\ of\ agents\ that\ are\ adjacent\ to\ the\ specified\ location\r\n
comment8.params=i\ j
comment8.target=boolean\ validLocation(int,\ int)
comment8.text=\r\n\ Determines\ if\ the\ specified\ grid\ location\ is\ valid.\r\n\ \r\n\ @return\ true\ if\ the\ specified\ location\ is\ a\ valid\ grid\ cell\r\n
comment9.params=
comment9.target=GridLocation\ findVacantLocation()
comment9.text=\r\n\ Finds\ a\ vacant\ location\ in\ the\ simulation\ grid.\ Keeps\ checking\ cell\r\n\ locations\ at\ random\ until\ a\ vacant\ one\ is\ found.\r\n\ \r\n\ @return\ the\ grid\ location\ of\ a\ vacant\ cell\r\n
numComments=11
